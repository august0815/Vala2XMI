using Gtk;
using Gee;

public class    Control : Object  {

private int YING;
public int YANG;
public MasterState master;		
public HashMap<string, string>  datatype;
private int PING (){return 0;}
private int PNOG (int a ,string b){return 0;}
public  static void build( MasterState master,string folder){
		/** @TODO Rekursive verzeichnisse
		*/
	var d=new DATATYPE();
	var datatype=d.getData();
	//string filename = filetocount;
    int index=0;
	string datastring1="""        <UML:DataType  xmi.id="""";
	string datastring2="""" name="""";
	string datastring3=""""/>""";
	string begin="""<?xml version="1.0" encoding="UTF-8"?>""";
string class_end="</UML:Class>\n";
string xmi="<XMI >\n";
string header="""<XMI.header>
	<XMI.documentation>
		<XMI.exporter>Auto generated by VALA-TO-XMI-gererator</XMI.exporter>
		<XMI.exporterVersion>see gihub.com</XMI.exporterVersion>
	</XMI.documentation>
</XMI.header>"""+"\n";
//string package_end="</UML:Package>\n";

string model_end="</UML:Model>\n";
string content_end="</XMI.content>\n";	
string class_begin1="""
<UML:Class isSpecification="false" isAbstract="false" name="""";
string class_begin2="""" isRoot="false" namespace="Logical View" visibility="public" isActive="false"  xmi.id="""";
string class_begin3="""" isLeaf="false">""";
//string package_begin1="""<UML:Package isSpecification="false" isAbstract="false" name="""";
//string package_begin2=""" " isRoot="false" visibility="public" isActive="false" xmi.id="m1" isLeaf="false"> """;
string class_atr1="""<UML:Attribute visibility="public" isSpecification="false" namespace="""";
string class_atr2="""" xmi.id="""";
string class_atr3="""" type="""";
string class_atr4="""" name="""";
string class_atr5=""""/>""";
string method1="""<UML:Operation  isAbstract="false" isLeaf="false" isRoot="false"  visibility="public" isSpecification="false" isQuery="false" """;
string method2=""" xmi.id="""";
string method3="""" name="""";
string method4="""">""";
string parameter1="""<UML:Parameter kind="return" xmi.id="""";
string parameter2="""" type="""";
string parameter3=""""/>""";
string pmt1="""<UML:Parameter visibility="""";
string pmt2="""" isSpecification="false" xmi.id="""";
string pmt3="""" type="""";
string pmt4="""" value="" name="""";
string pmt5=""""/>""";
 string vala="""
<XMI.content>
<UML:Model >
 """+"\n";

	string extentions="""
	<XMI.extensions xmi.extender="umbrello">
			<codegeneration>
				<codegenerator language="Vala"/>
			</codegeneration>
	</XMI.extensions>
	""";
	string final="\n</XMI>";
  //unichar c = '"';
 // string q=c.to_string();
 //string qq=";\n}";
 //vala += q+q+q+"\n";
/*		try {  /** @TODO Is this needed .
    
      filename=d+filename;
      FileUtils.get_contents (filename,out content);   	} catch (FileError e) {
   		stderr.printf("%s\n",e.message );
  		return ;
  	}
  */
  	
  try {
      /** @TODO Find a better logic
      */
      //var ffile = File.new_for_path (filename);  
      // string line;
      
      // string[] ddir = dir.split ("/");
      //string[] nname = filetocount.split (".");
      //string name=nname[0] ;
      //stdout.printf("PFAD %s",folder);
      var file = File.new_for_path (folder+"/main"+".test");
      // delete if file already exists
      if (file.query_exists ()) {
          file.delete ();
      }
      var dos = new DataOutputStream (file.create (FileCreateFlags.REPLACE_DESTINATION));
     // var classlist=master.getCLASS();
   
	// var names=master.getNamespace();
	 //foreach(Namespace n in names){
	 //dos.put_string(package_begin1+n.name+package_begin2);	  	
	  var classlist=master.getCLASS();
      foreach (CLASS c in classlist){
			if (c.name !=""){
		  	dos.put_string("CLASSNAME _>"+c.name+"\n");
		  	var mth=c.getMethod();
		  	foreach(Method m in mth){
				index ++;
				dos.put_string("METHODE ->"+m.name+"\n");
				if (m.return_typ!="none"){
				dos.put_string("RETURNTYPE ->"+m.return_id+" "+m.return_typ+"\n");
				}
				var prmt=m.getParameter();
				foreach(Parameter p in prmt){
					dos.put_string( "PARAMETER->"+p.name+"\n");
					//dos.put_string("METHODEPARAMETER --->%s  \n" ,p.name); 
					}
				
				
				
				
			}
			var atr=c.getAttribute();
		  	foreach(Attribute a in atr){
				index ++;
				dos.put_string("ATTRIBUTE ->"+a.name+"\n");
				//dos.put_string("ATTRIBUTE --->%s  %s\n", a.name); 
				}
			
			
			}
		}
		  	
		

	
	}
	      catch (Error e) {
        stderr.printf ("%s\n", e.message);
        return ;
    }
	return ;
	}
}
