using Gtk;
using Gee;

public class Builder : Object  {


public int YANG;
public MasterState master;		
public HashMap<string, string>  datatype;
public static void build_dir( MasterState master,string folder){
		/** @TODO Rekursive verzeichnisse
		*/
	
    int index=0;
	
	string begin="""<?xml version="1.0" encoding="UTF-8"?>""";
string class_end="</UML:Class>\n";
string xmi="<XMI >\n";
string header="""<XMI.header>
	<XMI.documentation>
		<XMI.exporter>Auto generated by VALA-TO-XMI-gererator</XMI.exporter>
		<XMI.exporterVersion>see https://github.com/august0815/Vala2XMI</XMI.exporterVersion>
	</XMI.documentation>
</XMI.header>"""+"\n";


string model_end="</UML:Model>\n";
string content_end="</XMI.content>\n";	
string datastring1="""        <UML:DataType  xmi.id="""";
string datastring2="""" name="""";
string datastring3=""""/>""";
string class_begin1="""
<UML:Class isSpecification="false" isAbstract="""";
string class_begin2="""" name="""";
string class_begin3="""" isRoot="false" namespace="""";
string class_begin5="""" visibility="public" isActive="false"  xmi.id="""";
string class_begin4="""" isLeaf="false">""";
string package_begin1="""<UML:Package>""";
string package_begin2=""" isAbstract="false" name="""";
string package_begin3="""" isRoot="false" visibility="public" isActive="false" """;
string package_begin5="""xmi.id="""";
string package_begin4="""</UML:Package>""";
string class_atr1="""<UML:Attribute visibility="""";
string class_atr2="""" isSpecification="false" namespace="""";
string class_atr3="""" xmi.id="""";
string class_atr4="""" type="""";
string class_atr5="""" name="""";
string class_atr6=""""/>""";
string method1="""<UML:Operation  isAbstract="""";
string method2="""" isLeaf="false" isRoot="false"  visibility="""";
string method3="""" isSpecification="false" isQuery="false" """;
string method4=""" xmi.id="""";
string method5="""" name="""";
string method6="""">""";
string parameter1="""<UML:Parameter kind="return" xmi.id="""";
string parameter2="""" type="""";
string parameter3=""""/>""";
string pmt1="""<UML:Parameter visibility="""";
string pmt2="""" isSpecification="false" xmi.id="""";
string pmt3="""" type="""";
string pmt4="""" value="" name="""";
string pmt5="\"";
string pmt6="""/>""";
 string vala="""
<XMI.content>
<UML:Model >
 """+"\n";

	string extentions="""
	<XMI.extensions xmi.extender="umbrello">
			<codegeneration>
				<codegenerator language="Vala"/>
			</codegeneration>
	</XMI.extensions>
	""";
	string final="\n</XMI>";

  	
  try {
      /** @TODO Find a better logic
      */
    
      var file = File.new_for_path (folder+"/main"+".xmi");
      // delete if file already exists
      if (file.query_exists ()) {
          file.delete ();
      }
      var dos = new DataOutputStream (file.create (FileCreateFlags.REPLACE_DESTINATION));
     // var classlist=master.getCLASS();
      
	  dos.put_string(begin);
			dos.put_string(xmi);
		  	dos.put_string(header);
		  	dos.put_string(vala);
		  	dos.put_string(package_begin1+"\n");
		  	var datatype=master.getData();
		  	foreach (var entry in datatype.entries) {
				dos.put_string(datastring1+entry.value+datastring2+entry.key+datastring3+"\n");
			}
		  	dos.put_string(package_begin4+"\n");
	var names=master.getNamespace();
	 foreach(Namespace n in names){
	if (n.name!=""){
	dos.put_string("<UML:Package "+package_begin2+n.name+package_begin3+package_begin5+n.id_string+"""""""+">\n");
    
	 ArrayList<string> list=n.getList();
	 foreach(string s in list){
	 string  testclass=s;
	 string n_id=n.id_string;
	 var classlist=master.getCLASS();
	  foreach (CLASS c in classlist){
		  	string statik="";		
			if (c.name !=""){
			if (c.name==testclass){
			if (c.statik) {statik="""" ownerScope="classifier""";}else{ statik="";}
		  	dos.put_string(class_begin1+c.Abstract+class_begin2+c.name+class_begin3+n_id+class_begin5+c.xmi_id+class_begin4+"\n");
		  	var atr=c.getAttribute();
		  	foreach(Attribute a in atr){
				dos.put_string(class_atr1+a.visibility+class_atr2+c.xmi_id+class_atr3+a.xmi_id+class_atr4+a.typ +class_atr5+a.name+class_atr6+"\n");
				}
		  	var mth=c.getMethod();
		  	
		  	foreach(Method m in mth){
				statik="";	
				index ++;
				if (m.statik) {statik="""" ownerScope="classifier""";}else{statik="";}
				dos.put_string(method1+m.Abstract.to_string()+method2+m.visibility+method3+method4+m.xmi_id+method5+m.name+statik+method6+"\n");
				//stdout.printf("METHODE--->%s  \n" ,m.name);
				if (m.return_typ!="void"){
				dos.put_string(parameter1+m.return_id+parameter2+m.return_typ+parameter3+"\n");
				}
				else { dos.put_string(parameter1+m.return_id+parameter2+parameter3+"\n");}
				var prmt=m.getParameter();
				foreach(Parameter p in prmt){
					if (p.name!=""){
					string kind="";
					if (p.kind!="in"){kind=p.kind;}
					dos.put_string( pmt1+"public"+pmt2+p.xmi_id+pmt3+p.typ+pmt4+p.name+pmt5+kind+pmt6+"\n");
					//dos.put_string("METHODEPARAMETER --->%s  \n" ,p.name); 
									}
								}
				dos.put_string("</UML:Operation>\n");
							}
		  	dos.put_string(class_end);
						}
					}
				}
			}
		}
	dos.put_string(package_begin4+"\n");
	} 
//dos.put_string("<UML:Package "+package_begin2+ package_begin3+package_begin5+"""""""+">\n");
    
var classlist=master.getCLASS();
	//dos.put_string("</UML:Package "+package_begin2+c+package_begin3+"\n");
      foreach (CLASS c in classlist){
		  	string statik="";		
			if (c.name !=""){
				if (c.namespc==""){
				if (c.statik) {statik="""" ownerScope="classifier""";}else{ statik="";}
		  	dos.put_string(class_begin1+c.Abstract+class_begin2+c.name+class_begin3+"Logical View"+class_begin5+c.xmi_id+class_begin4+"\n");
		  	var atr=c.getAttribute();
		  	foreach(Attribute a in atr){
				dos.put_string(class_atr1+a.visibility+class_atr2+c.xmi_id+class_atr3+a.xmi_id+class_atr4+a.typ +class_atr5+a.name+class_atr6+"\n");
				}
		  	var mth=c.getMethod();
		  	
		  	foreach(Method m in mth){
				statik="";	
				index ++;
				if (m.statik) {statik="""" ownerScope="classifier""";}else{statik="";}
				dos.put_string(method1+m.Abstract.to_string()+method2+m.visibility+method3+method4+m.xmi_id+method5+m.name+statik+method6+"\n");
				//stdout.printf("METHODE--->%s  \n" ,m.name);
				if (m.return_typ!="void"){
				dos.put_string(parameter1+m.return_id+parameter2+m.return_typ+parameter3+"\n");
				}
				else { dos.put_string(parameter1+m.return_id+parameter2+parameter3+"\n");}
				var prmt=m.getParameter();
				foreach(Parameter p in prmt){
					if (p.name!=""){
					string kind="";
					if (p.kind!="in"){kind=p.kind;}
					dos.put_string( pmt1+"public"+pmt2+p.xmi_id+pmt3+p.typ+pmt4+p.name+pmt5+kind+pmt6+"\n");
					//dos.put_string("METHODEPARAMETER --->%s  \n" ,p.name); 
				}
					}
				dos.put_string("</UML:Operation>\n");
			}
		  	dos.put_string(class_end);
				}
			}
		}
		  	dos.put_string(model_end);
			dos.put_string(content_end);
			dos.put_string(extentions+final);
	
	}
	      catch (Error e) {
        stderr.printf ("%s\n", e.message);
        return ;
    }
	return ;
	}
	
	
	
}
